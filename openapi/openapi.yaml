openapi: 3.0.0
info:
  title: User & Task API
  description: API для работы с пользователями и задачами
  version: "1.0"

paths:
  # Endpoints for Users
  /users:
    get:
      summary: Get all users
      operationId: GetUsers
      tags:
        - users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create new user
      operationId: PostUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully created

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: GetUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    patch:
      summary: Update user by ID
      operationId: PatchUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found

    delete:
      summary: Delete user by ID
      operationId: DeleteUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  # Endpoints for Tasks
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task for a specific user
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    patch:
      summary: Update a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the task to update
      requestBody:
        description: The updated task data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '500':
          description: Server error

    delete:
      summary: Delete a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the task to delete
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found
        '500':
          description: Server error

  /users/{id}/tasks:
    get:
      summary: Get tasks for a specific user
      operationId: GetTasksByUserID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of tasks for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '404':
          description: User not found
        '500':
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: "password123"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
          nullable: true
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          description: List of tasks assigned to the user

    Task:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the task
        task:
          type: string
          description: Description of the task
        is_done:
          type: boolean
          description: Indicates whether the task is completed
        user_id:
          type: integer
          description: ID of the user associated with the task
        created_at:
          type: string
          format: date-time
          description: Timestamp when the task was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the task was last updated
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the task was soft-deleted

    UpdateTaskRequest:
      type: object
      properties:
        task:
          type: string
          nullable: true
          description: Updated description of the task

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
