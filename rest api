Рест - это не протокол, а архитектурный стиль.
Чтобы взаимодействовать с объектом API (дергать ручки) - необходимо использовать URL
Для того чтобы изменять состояние объекта используем методы - POST, GET, PUT, DELETE и тд.
Чтобы клиент и сервер друг друга понимали используются разнообразные заголовки, в теле запроса можно передать информацию,
часто это json, но чтобы сервер или клиент знал в каком формате ты ему отправляешь информацию - это надо указать в заголовке.
Чтобы клиент понял что с его запросом - в ответе ему прилетает статус



1 Разделение клиент и сервера

2 Сервер не должен знать о том, что происходит на клиенте (он должен получать только ту информацию, которая ему нужна для выполнения запроса)

3 Единый интерфейс (все запросы осуществляются по одному URL)
        POST -добавить информацию
        PUT - обновить информацию
        DELETE - удалить
        GET - получить

4 многоуровневость систем

5 начало от нуля

6 кэшируемость

7 предоставление кода по запросу


REST API (Representational State Transfer Application Programming Interface) - это архитектурный стиль, используемый для
проектирования распределенных сетевых приложений. Он основан на принципах и ограничениях, определенных в стандарте HTTP,
и предоставляет удобный способ взаимодействия между клиентом и сервером.

Принципы REST API:

Клиент-серверная архитектура: Клиент и сервер разделены и могут развиваться независимо друг от друга.
Без состояния (Stateless): Каждый запрос от клиента содержит все необходимые данные для его обработки. Сервер не хранит состояние между запросами.
Кэширование: Клиент или сервер могут кэшировать данные для повторного использования и улучшения производительности.
Единообразие интерфейса: Интерфейс API должен быть однозначно определен и понятен для всех клиентов.
Слои: Клиент может обращаться с запросами к промежуточным серверам или прокси-серверам, не зная о них.



Примеры использования REST API:


Получение информации о пользователе:
GET /api/users/{id}
Клиент отправляет GET-запрос на сервер, указывая идентификатор пользователя.
Сервер отвечает с информацией о пользователе в формате JSON или XML.



Создание нового ресурса:
POST /api/products
Content-Type: application/json

{
  "name": "Новый продукт",
  "price": 10.99,
  "description": "Описание нового продукта"
}
Клиент отправляет POST-запрос на сервер для создания нового продукта.
В теле запроса передаются данные о продукте в формате JSON.
Сервер сохраняет новый ресурс и возвращает ответ с кодом состояния (например, 201 Created) и информацией о созданном ресурсе.




Обновление ресурса:

PUT /api/products/{id}
Content-Type: application/json

{
  "name": "Измененный продукт",
  "price": 15.99,
  "description": "Обновленное описание продукта"
}
Клиент отправляет PUT-запрос на сервер с обновленными данными о продукте.
Сервер обновляет ресурс с указанным идентификатором и возвращает ответ с кодом состояния (например, 200 OK).




Удаление ресурса:

DELETE /api/products/{id}
Клиент отправляет DELETE-запрос на сервер с идентификатором продукта.
Сервер удаляет указанный ресурс и возвращает ответ с кодом состояния (например, 204 No Content).




REST API использует стандартные HTTP-методы (GET, POST, PUT, DELETE) для определения операций над ресурсами и позволяет
клиентам и серверам взаимодействовать между собой, обмениваясь данными в удобном формате (чаще всего JSON или XML).